[{"authors":["dim"],"categories":null,"content":"After receiving a Master of Engineering degree in Systems and Networks from the University of Nantes in 2012, I started a Ph.D in computer science about the designing of fault-tolerant, low-cost and high-performance coding techniques for distributed storage systems. With funding from Rozo Systems , and under the supervision of Nicolas Normand and Benoît Parrein, I defended my thesis in 2016.\nSince then, I have been working on the Discovery Initiative as a postdoctoral researcher, at the STACK team of Inria and LS2N. My research deals with distributed application deployment and reconfiguration on dynamic and massively-distributed infrastructures (e.g. Fog and Edge computing).\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"fbc9eb4e20aef899eca002c8787568a6","permalink":"https://dpertin.github.io/authors/dim/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/dim/","section":"authors","summary":"After receiving a Master of Engineering degree in Systems and Networks from the University of Nantes in 2012, I started a Ph.D in computer science about the designing of fault-tolerant, low-cost and high-performance coding techniques for distributed storage systems. With funding from Rozo Systems , and under the supervision of Nicolas Normand and Benoît Parrein, I defended my thesis in 2016.\nSince then, I have been working on the Discovery Initiative as a postdoctoral researcher, at the STACK team of Inria and LS2N.","tags":null,"title":"Dimitri Pertin","type":"authors"},{"authors":["Maverick Chardet","Hélène Coullon","Dimitri Pertin","Christian Pérez"],"categories":null,"content":"","date":1531699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531699200,"objectID":"dbcb4f16f0efad5b438df530169a5400","permalink":"https://dpertin.github.io/publication/hpcs2018chardet/","publishdate":"2018-07-16T00:00:00Z","relpermalink":"/publication/hpcs2018chardet/","section":"publication","summary":"Distributed software architectures are composed of multiple interacting modules, or components. Deploying such software consists in installing them on a given infrastructure and leading them to a functional state. However, since each module has its own life cycle and might have various dependencies with other modules, deploying such software is a very tedious task, particularly on massively distributed and heterogeneous infrastructures. To address this problem, many solutions have been designed to automate the deployment process. In this paper, we introduce Madeus, a component-based deployment model for complex distributed software. Madeus accurately describes the life cycle of each component by a Petri net structure, and is able to finely express the dependencies between components. The overall dependency graph it produces is then used to reduce deployment time by parallelizing deployment actions. While this increases the precision and performance of the model, it also increases its complexity. For this reason, the operational semantics needs to be clearly defined to prove results such as the termination of a deployment. In this paper, we formally describe the operational semantics of Madeus, and show how it can be used in a use- case: the deployment of a real and large distributed software (i.e., OpenStack).","tags":null,"title":"Madeus: a Formal Deployment Model","type":"publication"},{"authors":["Ronan-Alexandre Cherrueau","Adrien Lèbre","Dimitri Pertin","Fetahi Wuhib","João Monteiro Soares"],"categories":null,"content":"","date":1530403200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530403200,"objectID":"887133b701c723f17f8d2e514b9dd610","permalink":"https://dpertin.github.io/publication/hotedge2018cherrueau/","publishdate":"2018-07-01T00:00:00Z","relpermalink":"/publication/hotedge2018cherrueau/","section":"publication","summary":"While it is clear that edge infrastructures are required for emerging use-cases related to IoT, VR or NFV, there is currently no resource management system able to deliver all features for the edge that made cloud computing successful (e.g., an OpenStack for the edge). Since building a system from scratch is seen by many as impractical, this paper provides reflections regarding how existing solutions can be leveraged. To that end, we provide a list of the features required to operate and use edge computing resources, and investigate how an existing IaaS manager (i.e., OpenStack) satisfies these requirements. Finally, we identify from this study two approaches to design an edge infrastructure manager that fulfils our requirements, and discuss their pros and cons.","tags":null,"title":"Edge Computing Resource Management System: a Critical Building Block! Initiating the debate via OpenStack","type":"publication"},{"authors":null,"categories":null,"content":"MAD is a Python implementation of the Madeus model. Its purpose is to offer a way to define a low-level deployment process and coordinate this deployment in an efficient and reliable manner. MAD is low-level but offers a highly generic deployment model.\n","date":1519999574,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519999574,"objectID":"7986db9cf7286fa6cea157fcfa28c9b0","permalink":"https://dpertin.github.io/project/madeus/","publishdate":"2018-03-02T15:06:14+01:00","relpermalink":"/project/madeus/","section":"project","summary":"Python engine for Madeus: a component-based model improving understandability and the performance of distributed software deployment.","tags":null,"title":"Madeus Application Deployer (MAD)","type":"project"},{"authors":["Ronan-Alexandre Cherrueau","Dimitri Pertin","Anthony Simonet","Adrien Lebre","Matthieu Simonin"],"categories":null,"content":"EnOS is an open-source framework to easily deploy, benchmark and analyze different customized instances of OpenStack on multiple testbeds (e.g. Grid5000, Vagrant, OpenStack). It is built with Experimentation-as-Code and automation in mind.\n","date":1519998344,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519998344,"objectID":"2b88d439f11897dda285c1f0c2653bb1","permalink":"https://dpertin.github.io/project/enos/","publishdate":"2018-03-02T14:45:44+01:00","relpermalink":"/project/enos/","section":"project","summary":"EnOS deploys OpenStack and targets reproducible experiments.","tags":["Automation","IaaS","OpenStack","Performance"],"title":"EnOS: Experimental eNvironment for OpenStack","type":"project"},{"authors":["Maverick Chardet","Ronan-Alexandre Cherrueau","Helene Coullon","Adrien Lebre","Jonathan Pastor","Christian Perez","Dimitri Pertin","Javier Rojas Balderrama","Anthony Simonet","Matthieu Simonin"],"categories":null,"content":"Discovery aims at implementing a fully decentralized IaaS manager to overcome the main limitations of the traditional server-centric cloud solutions regarding Fog/Edge infrastructures. To that end, it revises the OpenStack software in order to make it inherently cooperative. I was involved in its  Fog/Edge/Massively Distributed Clouds (FEMDC) working group.\n","date":1519998075,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519998075,"objectID":"5fc9822944e7c95af4d1826d9e5b1693","permalink":"https://dpertin.github.io/project/discovery/","publishdate":"2018-03-02T14:41:15+01:00","relpermalink":"/project/discovery/","section":"project","summary":"Build a fully decentralized IaaS manager for Fog/Edge infrastructures by revising OpenStack to make it inherently cooperative.","tags":["IaaS","OpenStack"],"title":"Discovery: Beyond the Clouds","type":"project"},{"authors":["Hélène Coullon","Christian Pérez","Dimitri Pertin"],"categories":null,"content":"","date":1503273600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1503273600,"objectID":"b6f9219d5601c32f411836ae95d6711d","permalink":"https://dpertin.github.io/publication/ficloud2017coullon/","publishdate":"2017-08-21T00:00:00Z","relpermalink":"/publication/ficloud2017coullon/","section":"publication","summary":"Emerging applications for the Internet of Things (IoT) are complex programs which are composed of multiple modules (or services). For scalability, reliability and performance, modular applications are distributed on infrastructures that support utility computing (e.g., Cloud, Fog). In order to simply operate such infrastructures, an Infrastructure-as-a-Service (IaaS) manager is required. OpenStack is the de-facto open-source solution to address the IaaS level of the Cloud paradigm. However, OpenStack is itself a large modular application composed of more than 150 modules that make it hard to deploy manually. To fully understand how IaaSes are deployed today, we propose in this paper an overall model of the application deployment process which describes each step with their interactions. This model then serves as the basis to analyse five different deployment tools used to deploy OpenStack in production: Kolla, Enos, Juju, Kubernetes, and TripleO. Finally, a comparison is provided and the results are discussed to extend this analysis.","tags":null,"title":"Production Deployment Tools for IaaSes: an Overall Model and Survey","type":"publication"},{"authors":["Ronan-Alexandre Cherrueau","Dimitri Pertin","Anthony Simonet","Adrien Lebre","Matthieu Simonin"],"categories":null,"content":"","date":1494720000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494720000,"objectID":"6b109b2d139fb3f077a77e96355fe625","permalink":"https://dpertin.github.io/publication/ccgrid2017cherrueau/","publishdate":"2017-05-14T00:00:00Z","relpermalink":"/publication/ccgrid2017cherrueau/","section":"publication","summary":"By massively adopting OpenStack for operating small to large private and public clouds, the industry has made it one of the largest running software project, overgrowing the Linux kernel. However, with success comes increased complexity; facing technical and scientific challenges, developers are in great difficulty when testing the impact of individual changes on the performance of such a large codebase, which will likely slow down the evolution of OpenStack. Thus, we claim it is now time for the scientific community to join the effort and get involved in the development of OpenStack, like it has been once done for Linux. In this spirit, we developed Enos, an integrated framework that relies on container technologies for deploying and evaluating OpenStack on any testbed. Enos allows researchers to easily express different configurations, enabling fine-grained investigations of OpenStack services. Enos collects performance metrics at runtime and stores them for post-mortem analysis and sharing. The relevance of the Enos approach to reproducible research is illustrated by evaluating different OpenStack scenarios on the Grid'5000 testbed.","tags":null,"title":"Toward a Holistic Framework for Conducting Scientific Evaluations of OpenStack","type":"publication"},{"authors":["Dimitri Pertin"],"categories":null,"content":"","date":1461283200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461283200,"objectID":"8f64d50ed2d00d2044f7e10d62433ab3","permalink":"https://dpertin.github.io/publication/phd2016pertin/","publishdate":"2016-04-22T00:00:00Z","relpermalink":"/publication/phd2016pertin/","section":"publication","summary":"Erasure codes can generate data redundancy in distributed storage systems. This redundancy can be used to recover missing data in case of a failure. Codes have the benefit of reducing the generated amount of redundancy drastically,compared to plain data replication. However, this reduction is combined with a significant computational complexity, which penalizes encoding and decoding performances, and limits the use of coding to cold data. In this thesis, we focus on the use of the Mojette transform as an effective erasure code, adapted to hot data. The resulting code requires more redundancy than classical codes though. The first contribution of this research work deals with the design of a systematic version of the Mojette erasure code. This version provides better performances while reducing the required amount of redundancy. The second contribution covers the integration of this solution in the distributed file system RozoFS. This integration enables the system to provide a continuous service despite failures, while being able to manage hot data with half the volume of data compared to replication-based systems. A third research focus addresses the design of a distributed method to compute extra Mojette codeword symbols. This method contributes to restore a redundancy threshold in the storage system.","tags":null,"title":"Mojette Erasure Code for Distributed Storage","type":"publication"},{"authors":["Dimitri Pertin","Alexandre Van Kempen","Benoît Parrein","Nicolas Normand"],"categories":null,"content":"","date":1434067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1434067200,"objectID":"c69c6115d1ee981e96429a97f848388f","permalink":"https://dpertin.github.io/publication/sifwict2015pertin/","publishdate":"2015-06-12T00:00:00Z","relpermalink":"/publication/sifwict2015pertin/","section":"publication","summary":"Coding techniques for RAID-6 storage systems, providing a double fault-tolerance, are varied. They all come with their respective benefits and limitations. In this paper, we compare the characteristics of five prominent erasure codes. We show that the general-purpose Reed-Solomon codes, either based on Vandermonde or Cauchy matrices, are outperformed by Array codes (i.e. EVENODD, RDP) which are specifically designed for RAID-6 storage systems. However geometrical codes such as the Mojette erasure code show even better performances at the cost of a slight extra storage overhead. We outline the differences between these codes in terms of encoding, updating and decoding complexity. We believe that such an analysis can be valuable to system designers to figure out which code would best suit their requirements.","tags":null,"title":"Comparison of RAID-6 Erasure Codes","type":"publication"},{"authors":["Dimitri Pertin","Nicolas Normand"],"categories":null,"content":"","date":1416873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1416873600,"objectID":"2827ab022c504a6a888282dbef87e552","permalink":"https://dpertin.github.io/publication/ri2014pertin/","publishdate":"2014-11-25T00:00:00Z","relpermalink":"/publication/ri2014pertin/","section":"publication","summary":"Discrete tomography focuses on image representation by its discrete projections, and the related inversion algorithms (or image reconstruction). Our study is based on redundant representations (considering more than just few projections). We propose a new approach to compute further redundancy (i.e. new projections) from a set of existing projections. While this technique relies on the geometric properties of ghosts, which are elements of the 2D image that sum to zero following some projection directions, we show an equivalent method using 1D convolutions, thus avoiding the explicit image reconstruction. This technique has interesting applications in distributed storage systems, where the use of redundancy data is key for system reliability.","tags":null,"title":"Re-projection without Reconstruction","type":"publication"},{"authors":["Olivier Blin","Quentin Lebourgeois","Nicolas Normand","Benoit Parrein","Dimitri Pertin"],"categories":null,"content":"RozoBox is a cluster of 8 Raspberry Pis (RPis) used to experiment, teach and popularize distributed storage. It was part of a project driven by two students from Polytech Nantes: Olivier Blin and Quentin Lebourgeois, and supervised by Nicolas Normand, and myself.\nRozoFS was deployed on the RPis and leveraged their 8 SD cards to provide a single storage volume that one can mount through the network.\nTo be fault-tolerant, RozoFS distributes redundant data across multiple servers. To that end, when a movie is stored on RozoFS, it is split into multiple data blocks. Each block is itself cut into data chunks, and some redundant chunks are computed from them. For instance, to provide fault-tolerance against two failures (like RAID-6), RozoFS computes two redundant chunks from four data chunks (and we get 4+2 chunks). Then, each chunk is spread on different servers. For reading, it is necessary to reach any subset of four chunks among the six that were distributed during the write process.\nTo make things clearer, the students have developed a monitoring tool based on ncurses which displayed the 8 RPis and enables give a quick statement of each card regarding CPU/RAM/disk/network metrics and according to colors:\n green: available (through the network) and idle; yellow: available and working (read/write activity); red: unavailable.  Thus, the demo was the following. I mounted the RozoFS volume from my computer after plugging it to the network switch. Then I played a video stored on RozoFS and the monitoring tool showed that 4 cards turned from green to yellow, meaning they were implied in the video playing. Then I caused a failure by disconnecting one of those implied card from the network. The video continued to be played while the monitoring tool showed one reading card turning red, and another one turning from green to yellow, meaning a first set of redundant chunks are used.\n","date":1401580800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1401580800,"objectID":"4fd793d9e46d7c063897e28c721873ba","permalink":"https://dpertin.github.io/project/rozobox/","publishdate":"2014-06-01T00:00:00Z","relpermalink":"/project/rozobox/","section":"project","summary":"Cluster of *Raspberry Pi*s to experiment, teach and popularize fault-tolerant distributed storage.","tags":["Erasure code","Mojette","Polytech","Université de Nantes"],"title":"Rozobox: resilient distributed storage on 8 RPis","type":"project"},{"authors":["Dimitri Pertin","Benoît Parrein","Nicolas Normand"],"categories":null,"content":"","date":1397347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1397347200,"objectID":"6119f2937a5a8aaf27bc332cca1f2622","permalink":"https://dpertin.github.io/publication/eurosys2014pertin/","publishdate":"2014-04-13T00:00:00Z","relpermalink":"/publication/eurosys2014pertin/","section":"publication","summary":"","tags":null,"title":"Distributed File System Based on Erasure Coding for I/O-Intensive Applications","type":"publication"},{"authors":["Dimitri Pertin","Sylvain David","Pierre Evenou","Benoît Parrein","Nicolas Normand"],"categories":null,"content":"","date":1396483200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1396483200,"objectID":"5af828b59650c9341d2809f2619ad233","permalink":"https://dpertin.github.io/publication/closer2014pertin/","publishdate":"2014-04-03T00:00:00Z","relpermalink":"/publication/closer2014pertin/","section":"publication","summary":"Distributed storage systems take advantage of the network, storage and computational resources to provide a scalable infrastructure. But in such large system, failures are frequent and expected. Data replication is the common technique to provide fault-tolerance but suffers from its important storage consumption. Erasure coding is an alternative that offers the same data protection but reduces significantly the storage consumption. As it entails additional workload, current storage providers limit its use for longterm storage. We present the Mojette Transform (MT), an erasure code whose computations rely on fast XOR operations. The MT is part of RozoFS, a distributed file system that provides a global namespace relying on a cluster of storage nodes. This work is part of our ongoing effort to prove that erasure coding is not necessarily a bottleneck for intense I/O applications. In order to validate our approach, we consider a case study involving a storage cluster of RozoFS that supports video editing as an I/O intensive application.","tags":null,"title":"A Distributed File System Based on Erasure Coding for I/O-Intensive Applications","type":"publication"},{"authors":["Jonathan Detchart","Jerome Lacan","Nicolas Normand","Benoit Parrein","Dimitri Pertin","Alexandre van Kempen"],"categories":null,"content":"FEC4Cloud is an ANR project that aims at promoting erasure codes in fault-tolerant Cloud storage architectures, by investigating algebraic soutions (e.g. Reed-Solomon codes) and codes based on discrete geometry (e.g. Mojette codes).\n","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1356998400,"objectID":"1d1f364f30293b48f49bb0758972c8e7","permalink":"https://dpertin.github.io/project/fec4cloud/","publishdate":"2013-01-01T00:00:00Z","relpermalink":"/project/fec4cloud/","section":"project","summary":"ANR project to promote erasure coding for fault-tolerance Cloud storage.","tags":["Erasure code","Mojette","Reed Solomon"],"title":"FEC4Cloud: error correcting codes for cloud storage","type":"project"},{"authors":["Dimitri Pertin","Giulio D'Ippolito","Nicolas Normand","Benoît Parrein"],"categories":null,"content":"","date":1341360000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1341360000,"objectID":"693d74435b8c40ca7074f891a7e0878e","permalink":"https://dpertin.github.io/publication/isivc2012pertin/","publishdate":"2012-07-04T00:00:00Z","relpermalink":"/publication/isivc2012pertin/","section":"publication","summary":"Fault-tolerance has been widely studied these years in order to fit new kinds of applications running on unreliable systems such as the Internet. Erasure coding aims at recovering information that has been lost during a transmission (e.g. congestion). Considered as the alternative to the Automatic Repeat-reQuest (ARQ) strategy, erasure coding differs by adding redundancy to recover lost information without the need to retransmit data. In this paper we propose a new approach using the Finite Radon Transform (FRT). The FRT is an exact and discrete transformation that relies on simple additions to obtain a set of projections. The proposed erasure code is Maximal Distance Separable (MDS). We detail in this paper the systematic and nonsystematic implementation. As an optimization, we use the same algorithm called \"row-solving\" for creating the redundancy and for recovering missing data.","tags":null,"title":"Spatial Implementation for Erasure Coding by Finite Radon Transform","type":"publication"},{"authors":["Pierre Evenou","Sylvain David","Didier Feron","Jean-Pierre Monchanin","Dimitri Pertin"],"categories":null,"content":"RozoFS is a scale-out distributed file system focused on fault-tolerance, low-cost and high-performance. To that end, it relies on the Mojette erasure coding. I have mainly contributed on its coding implementation.\n","date":1341100800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1341100800,"objectID":"450798115f7b7d98436a1ad9d9e5e7f0","permalink":"https://dpertin.github.io/project/rozofs/","publishdate":"2012-07-01T00:00:00Z","relpermalink":"/project/rozofs/","section":"project","summary":"RozoFS is a scale-out distributed file system focused on fault-tolerance, low-cost and high-performance.","tags":["Erasure code","Mojette"],"title":"RozoFS","type":"project"}]